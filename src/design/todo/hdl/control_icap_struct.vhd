-- VHDL Entity todo.control_icap.symbol
--
-- Created:
--          by - Juan Lanchares.UNKNOWN (LANCHARES)
--          at - 15:57:29 02/11/2016
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2015.1b (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

ENTITY control_icap IS
   PORT( 
      clk                 : IN     std_logic;
      rst                 : IN     std_logic;
      trigger_e           : IN     std_logic;
      trigger_w           : IN     std_logic;
      O                   : OUT    std_logic_vector (31 DOWNTO 0);
      activa_dinamico_reg : OUT    std_logic;
      busy                : OUT    std_logic;
      enable_led_reg      : OUT    std_logic;
      reset_dinamico_reg  : OUT    std_logic
   );

-- Declarations

END control_icap ;

--
-- VHDL Architecture todo.control_icap.struct
--
-- Created:
--          by - Juan Lanchares.UNKNOWN (LANCHARES)
--          at - 17:49:43 02/11/2016
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2015.1b (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;
LIBRARY UNISIM;
USE UNISIM.Vcomponents.ALL;
LIBRARY XilinxCoreLib;
USE XilinxCoreLib.all;

LIBRARY rom_e;
LIBRARY rom_w;
LIBRARY todo;

ARCHITECTURE struct OF control_icap IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL I               : std_logic_vector(31 DOWNTO 0);
   SIGNAL I_invertida     : std_logic_vector(31 DOWNTO 0);
   SIGNAL activa_dinamico : std_logic;
   SIGNAL csb             : std_logic;
   SIGNAL csb_to_Reg      : std_logic;
   SIGNAL dir             : std_logic_vector(14 DOWNTO 0);
   SIGNAL dout_e          : STD_LOGIC_VECTOR(31 DOWNTO 0);
   SIGNAL dout_w          : STD_LOGIC_VECTOR(31 DOWNTO 0);
   SIGNAL en_addr         : std_logic;
   SIGNAL enable_led      : std_logic;
   SIGNAL enable_reg      : std_logic;
   SIGNAL fin_addr        : std_logic;
   SIGNAL rdwrb           : std_logic;
   SIGNAL rdwrb_to_reg    : std_logic;
   SIGNAL reset_dinamico  : std_logic;
   SIGNAL sal             : std_logic_vector(31 DOWNTO 0);
   SIGNAL seleccion       : std_logic;
   SIGNAL trigg_e_reg     : std_logic;
   SIGNAL trigg_w_reg     : std_logic;
   SIGNAL trigger         : std_logic;
   SIGNAL trigger_in      : std_logic;


   -- Component Declarations
   COMPONENT rom_e
   PORT (
      addra : IN     STD_LOGIC_VECTOR (14 DOWNTO 0);
      clka  : IN     STD_LOGIC;
      douta : OUT    STD_LOGIC_VECTOR (31 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT rom_w
   PORT (
      addra : IN     STD_LOGIC_VECTOR (14 DOWNTO 0);
      clka  : IN     STD_LOGIC;
      douta : OUT    STD_LOGIC_VECTOR (31 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT control
   PORT (
      clk             : IN     std_logic ;
      icap_data       : IN     std_logic_vector (31 DOWNTO 0);
      rst             : IN     std_logic ;
      trigger         : IN     std_logic ;
      activa_dinamico : OUT    std_logic ;
      csb             : OUT    std_logic ;
      en_addr         : OUT    std_logic ;
      enable_led      : OUT    std_logic ;
      enable_reg      : OUT    std_logic ;
      fin_addr        : OUT    std_logic ;
      rdwrb           : OUT    std_logic ;
      reset_dinamico  : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT discriminador
   PORT (
      trigger_e : IN     std_logic;
      trigger_w : IN     std_logic;
      seleccion : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT generador_addr
   GENERIC (
      n : natural := 15
   );
   PORT (
      clk    : IN     std_logic;
      enable : IN     std_logic;
      fin    : IN     std_logic;
      rst    : IN     std_logic;
      dir    : OUT    std_logic_vector (n-1 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT inversion
   PORT (
      entrada       : IN     std_logic_vector (31 DOWNTO 0);
      out_invertida : OUT    std_logic_vector (31 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT mux
   PORT (
      in_e : IN     std_logic_vector (31 DOWNTO 0);
      in_w : IN     std_logic_vector (31 DOWNTO 0);
      sel  : IN     std_logic;
      sal  : OUT    std_logic_vector (31 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT registro
   PORT (
      clk : IN     std_logic;
      d   : IN     std_logic;
      rst : IN     std_logic;
      q   : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT registro_32
   PORT (
      clk : IN     std_logic;
      d   : IN     std_logic_vector (31 DOWNTO 0);
      rst : IN     std_logic;
      q   : OUT    std_logic_vector (31 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT registro_en
   PORT (
      clk    : IN     std_logic;
      d      : IN     std_logic;
      enable : IN     std_logic;
      rst    : IN     std_logic;
      q      : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT regula_trigger
   PORT (
      clk         : IN     std_logic ;
      rst         : IN     std_logic ;
      trigger_in  : IN     std_logic ;
      trigger_out : OUT    std_logic 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : control USE ENTITY todo.control;
   FOR ALL : discriminador USE ENTITY todo.discriminador;
   FOR ALL : generador_addr USE ENTITY todo.generador_addr;
   FOR ALL : inversion USE ENTITY todo.inversion;
   FOR ALL : mux USE ENTITY todo.mux;
   FOR ALL : registro USE ENTITY todo.registro;
   FOR ALL : registro_32 USE ENTITY todo.registro_32;
   FOR ALL : registro_en USE ENTITY todo.registro_en;
   FOR ALL : regula_trigger USE ENTITY todo.regula_trigger;
   FOR ALL : rom_e USE ENTITY rom_e.rom_e;
   FOR ALL : rom_w USE ENTITY rom_w.rom_w;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 icap
   
       
   
       
       
   ICAP_VIRTEX6_inst  :  ICAP_VIRTEX6
   generic  map  (
   DEVICE_ID  =>  X"04250093", --  Specifies  the  pre-programmed  Device  ID  value
   ICAP_WIDTH  =>  "X32", --  Specifies  the  input  and  output  data  width  to  be  used  with  the
   --  ICAP_VIRTEX6.
   --SIM_CFG_FILE_NAME  =>  "T:\Reconfiguracion_Dinamica\sim\simula.rbt"    --  Specifies  the  Raw  Bitstream  (RBT)  file  to  be  parsed  by  the  simulation
   --  model
   SIM_CFG_FILE_NAME  =>  "NONE"
   )
   
   
   port  map  (
   BUSY  =>  BUSY,      --  1-bit  Busy/Ready  output
   O  =>  O, --  32-bit  Configuration  data  output  bus
   CLK  =>  CLK, --  1-bit  Clock  Input
   CSB  =>  CSB, --  1-bit  Active-Low  ICAP  input  Enable
   I  =>  I_invertida, --  32-bit  Configuration  data  input  bus
   RDWRB  =>  RDWRB    --  1-bit  Read/Write  Select  input
   );
   --  End  of  ICAP_VIRTEX6_inst  instantiation   
   


   -- ModuleWare code(v1.12) for instance 'i_or' of 'or'
   trigger_in <= trigger_w OR trigger_e;

   -- Instance port mappings.
   i_rom_e : rom_e
      PORT MAP (
         clka  => clk,
         addra => dir,
         douta => dout_e
      );
   i_rom_w : rom_w
      PORT MAP (
         clka  => clk,
         addra => dir,
         douta => dout_w
      );
   i_control : control
      PORT MAP (
         clk             => clk,
         icap_data       => I,
         rst             => rst,
         trigger         => trigger,
         activa_dinamico => activa_dinamico,
         csb             => csb_to_Reg,
         en_addr         => en_addr,
         enable_led      => enable_led,
         enable_reg      => enable_reg,
         fin_addr        => fin_addr,
         rdwrb           => rdwrb_to_reg,
         reset_dinamico  => reset_dinamico
      );
   i_discriminador : discriminador
      PORT MAP (
         trigger_w => trigg_w_reg,
         trigger_e => trigg_e_reg,
         seleccion => seleccion
      );
   i_generador_dir : generador_addr
      GENERIC MAP (
         n => 15
      )
      PORT MAP (
         clk    => clk,
         rst    => rst,
         enable => en_addr,
         fin    => fin_addr,
         dir    => dir
      );
   i_inversion : inversion
      PORT MAP (
         entrada       => I,
         out_invertida => I_invertida
      );
   i_mux : mux
      PORT MAP (
         in_w => dout_w,
         in_e => dout_e,
         sel  => seleccion,
         sal  => sal
      );
   i_reg_activa_dinamico : registro
      PORT MAP (
         clk => clk,
         rst => rst,
         d   => activa_dinamico,
         q   => activa_dinamico_reg
      );
   i_reg_csb : registro
      PORT MAP (
         clk => clk,
         rst => rst,
         d   => csb_to_Reg,
         q   => csb
      );
   i_reg_enable_led : registro
      PORT MAP (
         clk => clk,
         rst => rst,
         d   => enable_led,
         q   => enable_led_reg
      );
   i_reg_rdwrb : registro
      PORT MAP (
         clk => clk,
         rst => rst,
         d   => rdwrb_to_reg,
         q   => rdwrb
      );
   i_reg_rst_dinamico : registro
      PORT MAP (
         clk => clk,
         rst => rst,
         d   => reset_dinamico,
         q   => reset_dinamico_reg
      );
   i_reg_i : registro_32
      PORT MAP (
         clk => clk,
         rst => rst,
         d   => sal,
         q   => I
      );
   i_reg_trigger_e : registro_en
      PORT MAP (
         clk    => clk,
         rst    => rst,
         d      => trigger_e,
         enable => enable_reg,
         q      => trigg_e_reg
      );
   i_reg_trigger_w : registro_en
      PORT MAP (
         clk    => clk,
         rst    => rst,
         d      => trigger_w,
         enable => enable_reg,
         q      => trigg_w_reg
      );
   i_regula_trigger : regula_trigger
      PORT MAP (
         clk         => clk,
         rst         => rst,
         trigger_in  => trigger_in,
         trigger_out => trigger
      );

END struct;
