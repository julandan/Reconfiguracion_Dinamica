-- VHDL Entity todo.control.symbol
--
-- Created:
--          by - Juan Lanchares.UNKNOWN (LANCHARES)
--          at - 15:32:10 17/10/2016
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2015.1b (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

ENTITY control IS
   PORT( 
      clk             : IN     std_logic;
      icap_data       : IN     std_logic_vector (31 DOWNTO 0);
      rst             : IN     std_logic;
      trigger         : IN     std_logic;
      activa_dinamico : OUT    std_logic;
      csb             : OUT    std_logic;
      en_addr         : OUT    std_logic;
      enable_led      : OUT    std_logic;
      enable_reg      : OUT    std_logic;
      fin_addr        : OUT    std_logic;
      rdwrb           : OUT    std_logic;
      reset_dinamico  : OUT    std_logic
   );

-- Declarations

END control ;

--
-- VHDL Architecture todo.control.fsm
--
-- Created:
--          by - Juan Lanchares.UNKNOWN (LANCHARES)
--          at - 15:53:56 18/10/2016
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2015.1b (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;
 
ARCHITECTURE fsm OF control IS

   TYPE STATE_TYPE IS (
      inicio,
      rdwrb_a_0,
      csb_a_0,
      read_rom,
      en_reset,
      en_activa,
      csb_a_1,
      rdwrb_a_1,
      vacia_mem,
      fin_dir
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

   -- Declare Wait State internal signals
   SIGNAL csm_timer : std_logic_vector(3 DOWNTO 0);
   SIGNAL csm_next_timer : std_logic_vector(3 DOWNTO 0);
   SIGNAL csm_timeout : std_logic;
   SIGNAL csm_to_vacia_mem : std_logic;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk
   )
   -----------------------------------------------------------------
   BEGIN
      IF (clk'EVENT AND clk = '1') THEN
         IF (rst = '1') THEN
            current_state <= inicio;
            csm_timer <= (OTHERS => '0');
         ELSE
            current_state <= next_state;
            csm_timer <= csm_next_timer;
         END IF;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      csm_timeout,
      current_state,
      icap_data,
      trigger
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default assignments to Wait State entry flags
      csm_to_vacia_mem <= '0';
      CASE current_state IS
         WHEN inicio => 
            IF (trigger='1') THEN 
               next_state <= rdwrb_a_0;
            ELSIF (trigger='0') THEN 
               next_state <= inicio;
            ELSE
               next_state <= inicio;
            END IF;
         WHEN rdwrb_a_0 => 
            next_state <= csb_a_0;
         WHEN csb_a_0 => 
            next_state <= read_rom;
         WHEN read_rom => 
            IF (icap_data/=x"0000000d") THEN 
               next_state <= read_rom;
            ELSIF (icap_data=x"0000000d") THEN 
               next_state <= vacia_mem;
               csm_to_vacia_mem <= '1';
            ELSE
               next_state <= read_rom;
            END IF;
         WHEN en_reset => 
            next_state <= en_activa;
         WHEN en_activa => 
            next_state <= inicio;
         WHEN csb_a_1 => 
            next_state <= rdwrb_a_1;
         WHEN rdwrb_a_1 => 
            next_state <= en_reset;
         WHEN vacia_mem => 
            IF (csm_timeout = '1') THEN 
               next_state <= fin_dir;
            ELSE
               next_state <= vacia_mem;
            END IF;
         WHEN fin_dir => 
            next_state <= csb_a_1;
         WHEN OTHERS =>
            next_state <= inicio;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      activa_dinamico <= '0';
      csb <= '1';
      en_addr <= '0';
      enable_led <= '0';
      enable_reg <= '0';
      fin_addr <= '0';
      rdwrb <= '1';
      reset_dinamico <= '0';

      -- Combined Actions
      CASE current_state IS
         WHEN inicio => 
            enable_reg<='1';
            enable_led<='1';
         WHEN rdwrb_a_0 => 
            rdwrb<='0';
         WHEN csb_a_0 => 
            csb<='0';
            rdwrb<='0';
         WHEN read_rom => 
            csb<='0';
            rdwrb<='0';
            en_addr<='1';
         WHEN en_reset => 
            reset_dinamico<='1';
         WHEN en_activa => 
            activa_dinamico<='1';
         WHEN csb_a_1 => 
            rdwrb<='0';
         WHEN vacia_mem => 
            csb<='0';
            rdwrb<='0';
            en_addr<='1';
         WHEN fin_dir => 
            fin_addr<='1';
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
   -----------------------------------------------------------------
   csm_wait_combo_proc: PROCESS (
      csm_timer,
      csm_to_vacia_mem
   )
   -----------------------------------------------------------------
   VARIABLE csm_temp_timeout : std_logic;
   BEGIN
      IF (unsigned(csm_timer) = 0) THEN
         csm_temp_timeout := '1';
      ELSE
         csm_temp_timeout := '0';
      END IF;

      IF (csm_to_vacia_mem = '1') THEN
         csm_next_timer <= "1110"; -- no cycles(15)-1=14
      ELSE
         IF (csm_temp_timeout = '1') THEN
            csm_next_timer <= (OTHERS=>'0');
         ELSE
            csm_next_timer <= std_logic_vector(unsigned(csm_timer) - 1);
         END IF;
      END IF;
      csm_timeout <= csm_temp_timeout;
   END PROCESS csm_wait_combo_proc;

END fsm;
