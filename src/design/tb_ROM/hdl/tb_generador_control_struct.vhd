-- VHDL Entity tb_ROM.tb_generador_control.symbol
--
-- Created:
--          by - Juan Lanchares.UNKNOWN (LANCHARES)
--          at - 07:23:32 22/09/2016
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2015.1b (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY tb_generador_control IS
   PORT( 
      csb   : OUT    std_logic;
      dir   : OUT    std_logic_vector (13 DOWNTO 0);
      rdwrb : OUT    std_logic
   );

-- Declarations

END tb_generador_control ;

--
-- VHDL Architecture tb_ROM.tb_generador_control.struct
--
-- Created:
--          by - Juan Lanchares.UNKNOWN (LANCHARES)
--          at - 07:23:32 22/09/2016
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2015.1b (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE IEEE.numeric_std.all;

LIBRARY ROM;

ARCHITECTURE struct OF tb_generador_control IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL clk       : std_logic;
   SIGNAL en_addr   : std_logic;
   SIGNAL fin_addr  : std_logic;
   SIGNAL icap_data : std_logic_vector(31 DOWNTO 0);
   SIGNAL rst       : std_logic;
   SIGNAL trigger   : std_logic;


   -- Component Declarations
   COMPONENT control
   PORT (
      clk       : IN     std_logic ;
      icap_data : IN     std_logic_vector (31 DOWNTO 0);
      rst       : IN     std_logic ;
      trigger   : IN     std_logic ;
      csb       : OUT    std_logic ;
      en_addr   : OUT    std_logic ;
      fin_addr  : OUT    std_logic ;
      rdwrb     : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT generador_addr
   GENERIC (
      n : natural := 14
   );
   PORT (
      clk    : IN     std_logic;
      enable : IN     std_logic;
      fin    : IN     std_logic;
      rst    : IN     std_logic;
      dir    : OUT    std_logic_vector (n-1 DOWNTO 0)
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : control USE ENTITY ROM.control;
   FOR ALL : generador_addr USE ENTITY ROM.generador_addr;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   -- eb1 1                                        
   p_rst : process
   begin
     rst <= '0';
     wait for 100 ns;
     rst <= '1';
     wait for 250 ns;
     rst <= '0';
     wait;
   end process p_rst;    
   
   p_clk : process
   begin
     clk <= '0';
     wait for 10 ns;
     clk <= '1';
     wait for 10 ns;
   end process p_clk; 
   
   p_trigger: process
   begin
       trigger <='0';
       wait for 500 ns;
       trigger <='1';
       wait for 50 ns;
       trigger <='0';
       wait for 500 ns;
       trigger <='1';
       wait for 50 ns;
       trigger <='0';
       wait;
   end process p_trigger;
   
   p_icap_data: process
   begin
       icap_data <=x"20000000";
       wait for 800 ns;
       icap_data <=x"0000000d";
       wait for 50 ns;
       icap_data <=x"20000000";
       wait for 800 ns;
       icap_data <=x"0000000d";
       wait;
   end process p_icap_data;
   
   
                                       
   


   -- Instance port mappings.
   i_control : control
      PORT MAP (
         clk       => clk,
         icap_data => icap_data,
         rst       => rst,
         trigger   => trigger,
         csb       => csb,
         en_addr   => en_addr,
         fin_addr  => fin_addr,
         rdwrb     => rdwrb
      );
   i_generador_addr : generador_addr
      GENERIC MAP (
         n => 14
      )
      PORT MAP (
         clk    => clk,
         rst    => rst,
         enable => en_addr,
         fin    => fin_addr,
         dir    => dir
      );

END struct;
