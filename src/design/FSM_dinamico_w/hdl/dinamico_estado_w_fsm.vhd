-- VHDL Entity FSM_dinamico_w.dinamico_estado_w.symbol
--
-- Created:
--          by - Juan Lanchares.UNKNOWN (LANCHARES)
--          at - 15:20:37 27/10/2016
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2015.1b (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

ENTITY dinamico_estado_w IS
   PORT( 
      activa_dinamico : IN     std_logic;
      clk             : IN     std_logic;
      reset_dinamico  : IN     std_logic;
      rst             : IN     std_logic;
      activa_led_w    : OUT    std_logic;
      estado          : OUT    std_logic_vector (1 DOWNTO 0)
   );

-- Declarations

END dinamico_estado_w ;

--
-- VHDL Architecture FSM_dinamico_w.dinamico_estado_w.fsm
--
-- Created:
--          by - Juan Lanchares.UNKNOWN (LANCHARES)
--          at - 16:40:44 27/10/2016
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2015.1b (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;
 
ARCHITECTURE fsm OF dinamico_estado_w IS

   TYPE STATE_TYPE IS (
      s0,
      s2,
      s1
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

   -- Declare Wait State internal signals
   SIGNAL csm_timer : std_logic_vector(24 DOWNTO 0);
   SIGNAL csm_next_timer : std_logic_vector(24 DOWNTO 0);
   SIGNAL csm_timeout : std_logic;
   SIGNAL csm_to_s2 : std_logic;
   SIGNAL csm_to_s1 : std_logic;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk
   )
   -----------------------------------------------------------------
   BEGIN
      IF (clk'EVENT AND clk = '1') THEN
         IF (rst = '1') THEN
            current_state <= s0;
            csm_timer <= (OTHERS => '0');
         ELSIF (reset_dinamico = '1') THEN
            current_state <= s0;
            csm_timer <= (OTHERS => '0');
         ELSE
            current_state <= next_state;
            csm_timer <= csm_next_timer;
         END IF;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      activa_dinamico,
      csm_timeout,
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default assignments to Wait State entry flags
      csm_to_s2 <= '0';
      csm_to_s1 <= '0';
      CASE current_state IS
         WHEN s0 => 
            IF (activa_dinamico='1') THEN 
               next_state <= s1;
               csm_to_s1 <= '1';
            ELSIF (activa_dinamico='0') THEN 
               next_state <= s0;
            ELSE
               next_state <= s0;
            END IF;
         WHEN s2 => 
            IF (csm_timeout = '1') THEN 
               next_state <= s1;
               csm_to_s1 <= '1';
            ELSE
               next_state <= s2;
            END IF;
         WHEN s1 => 
            IF (csm_timeout = '1') THEN 
               next_state <= s2;
               csm_to_s2 <= '1';
            ELSE
               next_state <= s1;
            END IF;
         WHEN OTHERS =>
            next_state <= s0;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      activa_led_w <= '1';
      estado <= (others => '1');

      -- Combined Actions
      CASE current_state IS
         WHEN s0 => 
            activa_led_w<='0';
            estado<="00";
         WHEN s2 => 
            activa_led_w<='0';
            estado<="10";
         WHEN s1 => 
            activa_led_w<='1';
            estado<="01";
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
   -----------------------------------------------------------------
   csm_wait_combo_proc: PROCESS (
      csm_timer,
      csm_to_s2,
      csm_to_s1
   )
   -----------------------------------------------------------------
   VARIABLE csm_temp_timeout : std_logic;
   BEGIN
      IF (unsigned(csm_timer) = 0) THEN
         csm_temp_timeout := '1';
      ELSE
         csm_temp_timeout := '0';
      END IF;

      IF (csm_to_s2 = '1') THEN
         csm_next_timer <= "1011111010111100000111111"; -- no cycles(25000000)-1=24999999
      ELSIF (csm_to_s1 = '1') THEN
         csm_next_timer <= "1011111010111100000111111"; -- no cycles(25000000)-1=24999999
      ELSE
         IF (csm_temp_timeout = '1') THEN
            csm_next_timer <= (OTHERS=>'0');
         ELSE
            csm_next_timer <= std_logic_vector(unsigned(csm_timer) - 1);
         END IF;
      END IF;
      csm_timeout <= csm_temp_timeout;
   END PROCESS csm_wait_combo_proc;

END fsm;
